{"version":3,"file":"particleCanvas.js","sources":["../vite/modulepreload-polyfill","../utility-classes/Color.js","../utility-classes/Vector2d.js","../helpers/helpers.js","../utility-classes/EventEmitter.js","../classes/Particle.js","../classes/ParticleManager.js","../classes/ParticleCanvas.js"],"sourcesContent":["const p = function polyfill() {\n    const relList = document.createElement('link').relList;\n    if (relList && relList.supports && relList.supports('modulepreload')) {\n        return;\n    }\n    for (const link of document.querySelectorAll('link[rel=\"modulepreload\"]')) {\n        processPreload(link);\n    }\n    new MutationObserver((mutations) => {\n        for (const mutation of mutations) {\n            if (mutation.type !== 'childList') {\n                continue;\n            }\n            for (const node of mutation.addedNodes) {\n                if (node.tagName === 'LINK' && node.rel === 'modulepreload')\n                    processPreload(node);\n            }\n        }\n    }).observe(document, { childList: true, subtree: true });\n    function getFetchOpts(script) {\n        const fetchOpts = {};\n        if (script.integrity)\n            fetchOpts.integrity = script.integrity;\n        if (script.referrerpolicy)\n            fetchOpts.referrerPolicy = script.referrerpolicy;\n        if (script.crossorigin === 'use-credentials')\n            fetchOpts.credentials = 'include';\n        else if (script.crossorigin === 'anonymous')\n            fetchOpts.credentials = 'omit';\n        else\n            fetchOpts.credentials = 'same-origin';\n        return fetchOpts;\n    }\n    function processPreload(link) {\n        if (link.ep)\n            // ep marker = processed\n            return;\n        link.ep = true;\n        // prepopulate the load record\n        const fetchOpts = getFetchOpts(link);\n        fetch(link.href, fetchOpts);\n    }\n};__VITE_IS_MODERN__&&p();","\r\nexport class Color {\r\n  constructor( r = Color.randHex(), g = Color.randHex(), b = Color.randHex(), a = 1 ) {\r\n    this._r = r;\r\n    this._g = g;\r\n    this._b = b;\r\n    this._a = a;\r\n  }\r\n  //Are these getters and setters pointless? should setters be named differently?\r\n  get r() { return this._r }\r\n  get g() { return this._g }\r\n  get b() { return this._b }\r\n  get a() { return this._a }\r\n  get rgba() { return `rgba(${this.r}, ${this.g}, ${this.b}, ${this.a})` }\r\n\r\n  set r( re ) { this._r = re }\r\n  set g( gr ) { this._g = gr }\r\n  set b( bl ) { this._b = bl }\r\n  set a( al ) { this._a = al }\r\n\r\n  //returns a new color from the average values of an array of other colors,\r\n  static avgColors( colorArr ) {\r\n    const vals = { r: 0, g: 0, b: 0 };\r\n    colorArr.forEach( color => {\r\n      for ( let val in vals ) {\r\n        vals[ val ] += color[ val ] ** 2;\r\n      }\r\n    } )\r\n    for ( let val in vals ) {\r\n      vals[ val ] = Math.sqrt( vals[ val ] / colorArr.length )\r\n    }\r\n    return new Color( vals.r, vals.g, vals.b );\r\n  }\r\n\r\n  static randHex() {\r\n    return Math.round( Math.random() * 255 )\r\n  }\r\n}","\r\nexport class Vector2d {\r\n  constructor( x = 0, y = 0 ) {\r\n    this.x = x;\r\n    this.y = y;\r\n  }\r\n  get norm() {\r\n    return Math.sqrt( this.x ** 2 + this.y ** 2 )\r\n  }\r\n  copy() {\r\n    return new Vector2d( this.x, this.y )\r\n  }\r\n  set( x, y ) {\r\n    this.x = x;\r\n    this.y = y;\r\n  }\r\n  scale( scalar ) {\r\n    this.x *= scalar;\r\n    this.y *= scalar;\r\n  }\r\n  adjust( vtr ) {\r\n    this.x += vtr.x;\r\n    this.y += vtr.y;\r\n  }\r\n  perp() {\r\n    return new Vector2d( -this.y, this.x )\r\n  }\r\n  mult( scalar ) {\r\n    return new Vector2d( this.x * scalar, this.y * scalar );\r\n  }\r\n  dot( a ) {\r\n    return this.x * a.x + this.y * a.y;\r\n  }\r\n  add( vtr ) {\r\n    return new Vector2d( this.x + vtr.x, this.y + vtr.y )\r\n  }\r\n  minus( vtr ) {\r\n    return this.add( vtr.mult( -1 ) );\r\n  }\r\n  getUnit() {\r\n    return this.mult( 1 / this.norm );\r\n  }\r\n}","import { Vector2d as Vtr } from \"../utility-classes/Vector2d\";\r\n\r\nconst pi = Math.PI;\r\nconst randomAngle = () => 2 * pi * Math.random()\r\nconst randomAngleVtr = () => {\r\n  const directionRadeons = randomAngle();\r\n  return new Vtr(\r\n    Math.cos( directionRadeons ),\r\n    Math.sin( directionRadeons )\r\n  );\r\n}\r\n\r\nexport { randomAngle, pi, randomAngleVtr }","\r\nexport class EventEmitter {\r\n  constructor() {\r\n    this.events = {};\r\n  }\r\n  on( name, callback ) {\r\n    const callbacks = this.events[ name ];\r\n    if ( !callbacks ) this.events[ name ] = [ callback ];\r\n    else callbacks.push( callback );\r\n  }\r\n  trigger( name, event ) {\r\n    const callbacks = this.events[ name ];\r\n    if ( callbacks ) callbacks.forEach( callback => callback( event ) );\r\n  }\r\n  off( name, callback ) {\r\n    const index = this.events[ name ].indexOf( callback );\r\n    if ( index !== -1 ) {\r\n      this.events[ name ].splice( index, 1 );\r\n    }\r\n  }\r\n}","import { Color } from '../utility-classes/Color';\r\nimport { pi, randomAngleVtr } from '../helpers/helpers';\r\nimport { EventEmitter } from '../utility-classes/EventEmitter';\r\n\r\nexport class Particle extends EventEmitter {\r\n\tconstructor( position, speed, radius ) {\r\n\t\tsuper();\r\n\t\tthis.position = position;\r\n\t\tthis.velocity = randomAngleVtr().mult( speed );\r\n\t\tthis.color = new Color();\r\n\t\tthis.lineColor = new Color();\r\n\t\tthis.radius = radius;\r\n\r\n\t\tthis.move = () => {\r\n\t\t\tthis.position.adjust( this.velocity )\r\n\t\t};\r\n\t\tthis.on( 'move', this.move )\r\n\t\tthis.handleBoundCollision = e => {\r\n\t\t\tif ( e.direction === 'horizontal' ) {\r\n\t\t\t\tthis.vx *= -1;\r\n\t\t\t\tthis.x += e.adj;\r\n\t\t\t}\r\n\t\t\tif ( e.direction === 'vertical' ) {\r\n\t\t\t\tthis.vy *= -1;\r\n\t\t\t\tthis.y += e.adj;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.on( 'boundsCollide', this.handleBoundCollision )\r\n\t\tthis.handleCollision = e => {\r\n\t\t\tthis.velocity = e.v;\r\n\t\t}\r\n\t\tthis.on( 'collision', this.handleCollision )\r\n\t}\r\n\r\n\tget x() { return this.position.x }\r\n\tget y() { return this.position.y }\r\n\tget vx() { return this.velocity.x }\r\n\tget vy() { return this.velocity.y }\r\n\tget speed() { return this.velocity.norm }\r\n\tget direction() { return Math.acos( this.vx / this.speed ) }\r\n\tget mass() { return 4 / 3 * pi * this.radius ** 3 }\r\n\r\n\tset x( posX ) { this.position.x = posX }\r\n\tset y( posY ) { this.position.y = posY }\r\n\tset vx( velX ) { this.velocity.x = velX }\r\n\tset vy( velY ) { this.velocity.y = velY }\r\n}","import { Particle } from \"./Particle.js\";\r\nimport { EventEmitter } from \"../utility-classes/EventEmitter\";\r\nimport { Vector2d } from \"../utility-classes/Vector2d\";\r\n\r\nexport class ParticleManager extends EventEmitter {\r\n  constructor( options, width, height ) {\r\n    super()\r\n    const defaultOptions = {\r\n      minSpeed: 0.2,\r\n      maxSpeed: 0.5,\r\n      minRadius: 3,\r\n      maxRadius: 5,\r\n      initialParticles: 10,\r\n      vicinity: 50\r\n    }\r\n    this.particles = []\r\n    this.options = { ...defaultOptions, ...options }\r\n    this.bounds = { x: width, y: height }\r\n\r\n    for ( let i = this.options.initialParticles; i > 0; i-- ) {\r\n      this.add();\r\n    }\r\n\r\n    this.forParticleInLoop = ( e ) => {\r\n      const p = e.details;\r\n      this.checkParticleVicinity( p );\r\n      this.checkForBoundsCollision( p );\r\n      p.trigger( 'move' );\r\n    }\r\n    this.on( 'incrementTime', this.forParticleInLoop )\r\n  }\r\n  checkForBoundsCollision( p ) {\r\n    const isLeft = p.x - p.radius <= 0;\r\n    const isRight = p.x + p.radius >= this.bounds.x;\r\n    const isOver = p.y - p.radius <= 0;\r\n    const isUnder = p.y + p.radius >= this.bounds.y;\r\n    if ( isLeft || isRight ) {\r\n      p.trigger( 'boundsCollide', {\r\n        direction: 'horizontal',\r\n        adj: isLeft ? p.radius - p.x : this.bounds.x - p.x - p.radius\r\n      } )\r\n    }\r\n    if ( isUnder || isOver ) {\r\n      p.trigger( 'boundsCollide', {\r\n        direction: 'vertical',\r\n        adj: isOver ? p.radius - p.y : this.bounds.y - p.y - p.radius\r\n      } )\r\n    }\r\n  }\r\n  checkParticleVicinity( p ) {\r\n    let i = this.particles.indexOf( p );\r\n    this.particles.forEach( q => {\r\n      if ( p == q ) return;\r\n      //calcing values\r\n      const perp = p.position.minus( q.position );\r\n      const distance = perp.norm;\r\n      const isInVicinity = ( distance <= this.options.vicinity )\r\n      if ( isInVicinity ) {\r\n        this.trigger( 'inVicinity', { p, q } )\r\n      } else return;\r\n      // Calculate unit vectors only if required\r\n      const radii = p.radius + q.radius;\r\n      const isOverlap = ( distance < radii );\r\n      const isCollision = ( distance <= radii );\r\n      const perpunit = isCollision && perp.getUnit();\r\n      const tangunit = isCollision && perp.perp().getUnit();\r\n\r\n      // Shifts particles to the point of minimal( not zero! ) contact if they are overlapped\r\n      if ( isOverlap ) {\r\n        const diff = radii - distance;\r\n        const ratio = p.radius / radii;\r\n        const padj = perpunit.mult( ( 1 - ratio ) * diff );\r\n        p.position.adjust( padj );\r\n        const qadj = perpunit.mult( ratio * -diff );\r\n        q.position.adjust( qadj );\r\n      }\r\n\r\n      //Handles if this particle collides with another, redirecting both\r\n      if ( isCollision ) {\r\n        //u1 is the initial velocity of this particle and u2 the initial velocity of the colliding particle\r\n        //Projection of initial velocity along the perpendicular and tangent direction of the point of contact\r\n        const upp = p.velocity.dot( perpunit );\r\n        const uqp = q.velocity.dot( perpunit );\r\n        const upt = p.velocity.dot( tangunit );\r\n        const uqt = q.velocity.dot( tangunit );\r\n\r\n        /*\r\n          New velocity in the direction of the perpendicular \r\n          The velocity tangent to the point of collision does not change,\r\n          but the perpendicular does, hence turning the 2dimensional problem \r\n          into a 1dimensional, (1 dimensional collision equation)\r\n        */\r\n        const totalMass = p.mass + q.mass;\r\n        const vpp = ( q.mass * ( uqp - upp ) + p.mass * upp + q.mass * uqp ) / totalMass;\r\n        const vqp = ( p.mass * ( upp - uqp ) + p.mass * upp + q.mass * uqp ) / totalMass;\r\n\r\n        //Projecting the perp and tang velocities back onto cartesian coordinates\r\n        const xUnit = new Vector2d( 1, 0 );\r\n        const yUnit = new Vector2d( 0, 1 );\r\n        const pvx = perpunit.mult( vpp ).dot( xUnit ) + tangunit.mult( upt ).dot( xUnit );\r\n        const pvy = perpunit.mult( vpp ).dot( yUnit ) + tangunit.mult( upt ).dot( yUnit );\r\n        const qvx = perpunit.mult( vqp ).dot( xUnit ) + tangunit.mult( uqt ).dot( xUnit );\r\n        const qvy = perpunit.mult( vqp ).dot( yUnit ) + tangunit.mult( uqt ).dot( yUnit );\r\n        const pv = new Vector2d( pvx, pvy );\r\n        const qv = new Vector2d( qvx, qvy );\r\n        //Setting the new velocities on the particles\r\n        p.trigger( 'collision', { v: pv } );\r\n        q.trigger( 'collision', { v: qv } );\r\n      }\r\n    } )\r\n  }\r\n  randomPosition() {\r\n    const randX = Math.random() * ( this.bounds.x - 2 * this.options.maxRadius ) + this.options.maxRadius;\r\n    const randY = Math.random() * ( this.bounds.y - 2 * this.options.maxRadius ) + this.options.maxRadius;\r\n    return new Vector2d( randX, randY );\r\n  }\r\n  randomSpeed() {\r\n    const ops = this.options;\r\n    return Math.random() * ( ops.maxSpeed - ops.minSpeed ) + ops.minSpeed;\r\n  }\r\n  add( pos = this.randomPosition() ) {\r\n    const speed = this.randomSpeed();\r\n    const radius = this.options.minRadius + ( this.options.maxRadius - this.options.minRadius ) * ( ( speed - this.options.minSpeed ) / ( this.options.maxSpeed - this.options.minSpeed + 0.000001 ) )\r\n    this.particles.push( new Particle( pos, speed, radius ) );\r\n  }\r\n}","import { ParticleManager } from './ParticleManager';\r\nimport { pi } from '../helpers/helpers';\r\nimport { Color } from '../utility-classes/Color';\r\nimport { Vector2d } from '../utility-classes/Vector2d';\r\n\r\n//Getting the size of the this and assigning it to an object\r\nexport class ParticleCanvas extends HTMLCanvasElement {\r\n\tconstructor() {\r\n\t\tsuper()\r\n\t\t// set up defaults all of them!!!\r\n\t\tconst defaultOptions = {\r\n\t\t\tfillOpacity: 0.5,\r\n\t\t\tedgeOpacity: 1,\r\n\t\t\tmouseEdge: true,\r\n\t\t\tfill: true,\r\n\t\t\tfillColor: false,\r\n\t\t\toutline: false,\r\n\t\t\toutlineColor: false,\r\n\t\t\tedges: true,\r\n\t\t\tpixelDensity: 1\r\n\t\t}\r\n\t\tconst canvasOptions = JSON.parse( this.getAttribute( 'data-canvas-options' ) )\r\n\t\tconst particleOptions = JSON.parse( this.getAttribute( 'data-particle-options' ) )\r\n\t\tthis.options = { ...defaultOptions, ...canvasOptions }\r\n\t\tthis.width = this.computedStyle( 'width' ).replace( 'px', '' ) * this.options.pixelDensity\r\n\t\tthis.height = this.computedStyle( 'height' ).replace( 'px', '' ) * this.options.pixelDensity\r\n\t\tthis.bounds = this.getBoundingClientRect()\r\n\t\tthis.ctx = this.getContext( '2d' )\r\n\t\tthis.ctx.lineCap = \"round\";\r\n\t\tthis.particleManager = new ParticleManager( particleOptions, this.width, this.height )\r\n\t\tthis.mousePosition = new Vector2d();\r\n\r\n\t\tconst sizeWatcher = new ResizeObserver( this.createResizeHandler() );\r\n\t\tsizeWatcher.observe( this );\r\n\r\n\t\tthis.addEventListener( 'optionChange', this.handleOptionChange )\r\n\t\tthis.addEventListener( 'resize', this.createResizeHandler(), { passive: true } )\r\n\t\tthis.addEventListener( 'mouseenter', this.createMouseEnterHandler() )\r\n\t\tthis.addEventListener( 'mousemove', this.createHoverHandler(), { passive: true } )\r\n\t\tthis.addEventListener( 'mouseleave', this.createMouseLeaveHandler() )\r\n\t\tthis.particleManager.on( 'inVicinity', this.createInVicinityHandler() )\r\n\t\tthis.addEventListener( 'click', e => {\r\n\t\t\tthis.particleManager.add( this.mousePosition.copy() )\r\n\t\t} )\r\n\r\n\t\tconst renderLoop = () => {\r\n\t\t\tthis.setUpParticleRendering();\r\n\t\t\tthis.particleManager.particles.forEach( p => {\r\n\t\t\t\tthis.particleManager.trigger( 'incrementTime', { details: p } )\r\n\t\t\t} )\r\n\t\t\tthis.particleManager.particles.forEach( p => {\r\n\t\t\t\tthis.renderParticle( p );\r\n\t\t\t} )\r\n\t\t\tthis.renderMouseEdges();\r\n\t\t\trequestAnimationFrame( renderLoop )\r\n\t\t}\r\n\t\trenderLoop()\r\n\t}\r\n\tget area() {\r\n\t\treturn this.width * this.height\r\n\t}\r\n\tcreateResizeHandler() {\r\n\t\tlet resizeId;\r\n\t\treturn ( entries ) => {\r\n\t\t\tentries.forEach( entry => {\r\n\t\t\t\tif ( this !== entry.target ) return;\r\n\t\t\t\tclearTimeout( resizeId );\r\n\t\t\t\tresizeId = setTimeout( this.createResizer(), 200 );\r\n\t\t\t} )\r\n\t\t}\r\n\t}\r\n\tcreateHoverHandler() {\r\n\t\treturn e => {\r\n\t\t\trequestAnimationFrame( () => {\r\n\t\t\t\tconst mod = this.options.pixelDensity;\r\n\t\t\t\tthis.mousePosition.set( e.offsetX * mod, e.offsetY * mod );\r\n\t\t\t} )\r\n\t\t}\r\n\t}\r\n\tcreateMouseEnterHandler() {\r\n\t\treturn () => {\r\n\t\t\tthis.mousePosition[ \"active\" ] = true;\r\n\t\t}\r\n\t}\r\n\tcreateMouseLeaveHandler() {\r\n\t\treturn () => {\r\n\t\t\tthis.mousePosition[ \"active\" ] = false;\r\n\t\t}\r\n\t}\r\n\tcreateInVicinityHandler() {\r\n\t\treturn e => {\r\n\t\t\tif ( this.options.edges ) this.renderEdge( e.p, e.q );\r\n\t\t}\r\n\t}\r\n\trefresh() {\r\n\t\tthis.width = this.computedStyle( 'width' ).replace( 'px', '' ) * this.options.pixelDensity;\r\n\t\tthis.height = this.computedStyle( 'height' ).replace( 'px', '' ) * this.options.pixelDensity;\r\n\t\tthis.bounds = this.getBoundingClientRect();\r\n\t}\r\n\tcreateResizer() {\r\n\t\treturn () => {\r\n\t\t\tconst oldCanvasSize = { width: this.width, height: this.height, area: this.area };\r\n\t\t\tthis.refresh();\r\n\r\n\t\t\tconst sizeRatio = this.area / oldCanvasSize.area;\r\n\t\t\tthis.particleManager.options.vicinity *= sizeRatio ** 0.5;\r\n\r\n\t\t\tthis.particleManager.particles.forEach( p => {\r\n\t\t\t\tp.position.set(\r\n\t\t\t\t\tp.x * ( this.width / oldCanvasSize.width ),\r\n\t\t\t\t\tp.y * ( this.height / oldCanvasSize.height )\r\n\t\t\t\t)\r\n\t\t\t} )\r\n\t\t\tthis.particleManager.bounds.x = this.width;\r\n\t\t\tthis.particleManager.bounds.y = this.height;\r\n\r\n\t\t\tthis.height = Math.floor( this.options.pixelDensity * this.height );\r\n\t\t\tthis.width = Math.floor( this.options.pixelDensity * this.width );\r\n\t\t}\r\n\t}\r\n\tsetUpParticleRendering() {\r\n\t\tthis.ctx.clearRect( 0, 0, this.width, this.height );\r\n\t}\r\n\trenderParticle( p ) {\r\n\t\tconst ctx = this.ctx;\r\n\t\tconst opn = this.options;\r\n\t\tif ( opn.fill || opn.outline ) {\r\n\t\t\tctx.beginPath();\r\n\t\t\tctx.arc( p.x, p.y, p.radius, 0, 2 * pi );\r\n\t\t}\r\n\t\tif ( opn.fill ) {\r\n\t\t\tctx.fillStyle = opn.fillColor || p.color.rgba;\r\n\t\t\tctx.fill();\r\n\t\t}\r\n\t\tif ( opn.outline ) {\r\n\t\t\tctx.strokeStyle = opn.outlineColor || p.lineColor.rgba;\r\n\t\t\tctx.lineWidth = p.radius / 3;\r\n\t\t\tctx.stroke();\r\n\t\t}\r\n\t}\r\n\t//Draws edges between particles within a vicinity, and also to the tracked mouse position\r\n\trenderEdge( p, q ) {\r\n\t\tconst ctx = this.ctx;\r\n\t\tconst diff = p.position.minus( q.position );\r\n\t\tconst distance = diff.norm;\r\n\t\tconst alpha = this.options.edgeOpacity - ( distance / ( this.particleManager.options.vicinity / this.options.edgeOpacity ) );\r\n\t\tconst radii = p.radius + q.radius;\r\n\t\tlet edgeColor = '';\r\n\t\tswitch ( true ) {\r\n\t\t\tcase ( this.options.outlineColor ):\r\n\t\t\t\tedgeColor = this.options.outlineColor;\r\n\t\t\t\tbreak\r\n\t\t\tcase ( this.options.outline ):\r\n\t\t\t\tedgeColor = Color.avgColors( [ p.lineColor, q.lineColor ] ).rgba;\r\n\t\t\t\tbreak\r\n\t\t\tcase ( this.options.fillColor ):\r\n\t\t\t\tedgeColor = this.options.fillColor;\r\n\t\t\t\tbreak\r\n\t\t\tdefault:\r\n\t\t\t\tedgeColor = Color.avgColors( [ p.color, q.color ] ).rgba;\r\n\t\t}\r\n\t\tctx.strokeStyle = edgeColor;\r\n\t\tctx.globalAlpha = alpha;\r\n\t\tctx.lineWidth = radii / 5;\r\n\t\tctx.beginPath();\r\n\t\tctx.moveTo( p.x, p.y );\r\n\t\tctx.lineTo( q.x, q.y );\r\n\t\tctx.stroke()\r\n\t\tctx.globalAlpha = 1;\r\n\t}\r\n\trenderMouseEdges() {\r\n\t\tif ( !this.mousePosition[ \"active\" ] ) return\r\n\t\tthis.particleManager.particles.forEach( p => {\r\n\t\t\tconst distance = p.position.minus( this.mousePosition ).norm;\r\n\t\t\tif ( distance > this.particleManager.options.vicinity * 1.5 ) return;\r\n\t\t\tconst alpha = this.options.edgeOpacity - ( distance / ( ( this.particleManager.options.vicinity * 1.5 ) / this.options.edgeOpacity ) );\r\n\t\t\tlet edgeColor = '';\r\n\t\t\tswitch ( true ) {\r\n\t\t\t\tcase ( this.options.outlineColor ):\r\n\t\t\t\t\tedgeColor = this.options.outlineColor;\r\n\t\t\t\t\tbreak\r\n\t\t\t\tcase ( this.options.outline ):\r\n\t\t\t\t\tedgeColor = p.lineColor.rgba;\r\n\t\t\t\t\tbreak\r\n\t\t\t\tcase ( this.options.fillColor ):\r\n\t\t\t\t\tedgeColor = this.options.fillColor;\r\n\t\t\t\t\tbreak\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tedgeColor = p.color.rgba;\r\n\t\t\t}\r\n\t\t\tconst ctx = this.ctx;\r\n\t\t\tctx.strokeStyle = edgeColor;\r\n\t\t\tctx.globalAlpha = alpha;\r\n\t\t\tctx.lineWidth = p.radius * 0.8;\r\n\t\t\tctx.beginPath();\r\n\t\t\tctx.moveTo( p.x, p.y );\r\n\t\t\tctx.lineTo( this.mousePosition.x, this.mousePosition.y );\r\n\t\t\tctx.stroke()\r\n\t\t\tctx.globalAlpha = 1;\r\n\t\t} )\r\n\t}\r\n\tcomputedStyle( prop ) {\r\n\t\treturn getComputedStyle( this ).getPropertyValue( prop );\r\n\t}\r\n}\r\n\r\nwindow.customElements.define( 'particle-canvas', ParticleCanvas, { extends: 'canvas' } );"],"names":["Vtr"],"mappings":"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"}