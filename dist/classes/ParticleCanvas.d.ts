import { ParticleManager, ParticleManagerOptions } from './ParticleManager.js';
import { Vector2d } from '../utility-classes/Vector2d.js';
import { ZEvent } from '../utility-classes/EventEmitter.js';
import { Particle } from './Particle.js';
type ParticleCanvasOptions = {
    fill: boolean;
    fillColor: string;
    fillOpacity: number;
    outline: boolean;
    edges: boolean;
    edgeOpacity: number;
    mouseEdges: boolean;
    pixelDensity: number;
};
declare const defaultOptions: {
    readonly fill: true;
    readonly 'fill-color': "";
    readonly 'fill-opacity': 0.75;
    readonly outline: false;
    readonly edges: true;
    readonly 'edge-opacity': 0.8;
    readonly 'mouse-edges': true;
    readonly 'pixel-density': 1;
    readonly 'min-speed': 0.1;
    readonly 'max-speed': 0.8;
    readonly 'min-radius': 1;
    readonly 'max-radius': 5;
    readonly 'initial-number': 30;
    readonly vicinity: 75;
};
export declare class ParticleCanvas extends HTMLElement {
    static observedAttributes: readonly ["fill-opacity", "edge-opacity", "mouse-edges", "fill", "fill-color", "outline", "edges", "pixel-density", "min-speed", "max-speed", "min-radius", "max-radius", "initial-number", "vicinity"];
    canvas: HTMLCanvasElement;
    options: ParticleCanvasOptions;
    managerOptions: ParticleManagerOptions;
    ctx: CanvasRenderingContext2D;
    manager: ParticleManager;
    mousePosition: Vector2d;
    connectedCallback(): void;
    disconnectedCallback(): void;
    constructor();
    attributeChangedCallback(name: string, prev: string, next: string): void;
    setting(key: keyof typeof defaultOptions): string;
    get area(): number;
    renderLoop: () => void;
    render(): void;
    refresh(): void;
    hoverHandler: (e: MouseEvent) => void;
    mouseClickHandler: (e: MouseEvent) => void;
    mouseEnterHandler: (e: any) => void;
    mouseLeaveHandler: () => void;
    inVicinityHandler: (e: ZEvent) => void;
    resize(): void;
    setUpParticleRendering(): void;
    renderParticle(p: Particle): void;
    renderEdge(p: Particle, q: Particle): void;
    renderMouseEdges(): void;
}
export {};
